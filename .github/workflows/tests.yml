name: Tests

on:
  push:
  pull_request:
  schedule:
    - cron: '0 1 1 * *' # Monthly

jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python: "3.10", os: "ubuntu-latest", session: "lint" }
          - { python: "3.10", os: "ubuntu-latest", session: "safety" }
          - { python: "3.10", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.9", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.8", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.7", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.10", os: "ubuntu-latest", session: "unit-tests" }
          - { python: "3.9", os: "ubuntu-latest", session: "unit-tests" }
          - { python: "3.8", os: "ubuntu-latest", session: "unit-tests" }
          - { python: "3.7", os: "ubuntu-latest", session: "unit-tests" }
          - { python: "3.10", os: "windows-latest", session: "unit-tests" }
          - { python: "3.10", os: "macos-latest", session: "unit-tests" }
          - { python: "3.10", os: "ubuntu-latest", session: "integration-tests" }
          - { python: "3.10", os: "ubuntu-latest", session: "docs-build" }

    env:
      NOXSESSION: ${{ matrix.session }}
      FORCE_COLOR: "1"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Install Poetry
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            pip install --upgrade pip six
          fi
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: 'poetry'

      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version

      - name: Run Nox
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            export SETUPTOOLS_USE_DISTUTILS=stdlib
          fi

          if [ "${{ matrix.session }}" = "safety" ]; then
            nox --python=${{ matrix.python }} || true
          else
            nox --python=${{ matrix.python }}
          fi

      - name: Upload coverage data
        if: always() && matrix.session == 'unit-tests'
        uses: "actions/upload-artifact@v2.3.1"
        with:
          name: coverage-data
          path: ".coverage.*"

      - name: Upload documentation
        if: matrix.session == 'docs-build'
        uses: actions/upload-artifact@v2.3.1
        with:
          name: docs
          path: docs/_build

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Install Poetry
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'poetry'

      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version

      - name: Download coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage data and display human readable report
        run: |
          nox --session=coverage

      - name: Create coverage report
        run: |
          nox --session=coverage -- xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3.1.0
